{"version":3,"sources":["utils.ts","components/Pagination/Pagination.tsx","App.tsx","index.tsx"],"names":["getNumbers","from","to","numbers","n","push","Pagination","total","perPage","currentPage","onPageChange","pages","Math","ceil","map","pagesLength","length","className","classNames","disabled","href","onClick","page","active","value","newPage","items","itemsLength","selectOptionsValues","App","params","useSearchParams","searchParams","setSearchParams","pageQuery","Number","get","perPageQuery","lastNumber","min","sliceItems","countPerPage","end","start","slice","useState","visibleItems","setVisibleItems","firstNumber","handleItems","count","toString","id","onChange","event","newCountPerPage","target","htmlFor","item","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecad53fe.chunk.js","sourcesContent":["export function getNumbers(from: number, to: number): number[] {\n  const numbers = [];\n\n  for (let n = from; n <= to; n += 1) {\n    numbers.push(n);\n  }\n\n  return numbers;\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { getNumbers } from '../../utils';\n\ntype Props = {\n  total: number\n  perPage: number\n  currentPage: number\n  onPageChange: (page: number) => void\n};\n\nexport const Pagination: React.FC<Props> = ({\n  total,\n  perPage,\n  currentPage,\n  onPageChange = () => {},\n}) => {\n  const pages = getNumbers(1, Math.ceil(total / perPage))\n    .map(n => n);\n  const pagesLength = pages.length;\n  const changePage = (newPage: number) => {\n    if (currentPage !== newPage) {\n      onPageChange(newPage);\n    }\n  };\n\n  return (\n    <>\n      <ul className=\"pagination\">\n        <li\n          className={classNames('page-item',\n            { disabled: currentPage - 1 === 0 })}\n        >\n          <a\n            data-cy=\"prevLink\"\n            className=\"page-link\"\n            href=\"#prev\"\n            aria-disabled={currentPage - 1 <= 0}\n            onClick={() => (\n              currentPage - 1 > 0 && onPageChange(currentPage - 1)\n            )}\n          >\n            «\n          </a>\n        </li>\n        {\n          pages.map(page => (\n            <li\n              className={classNames('page-item',\n                { active: currentPage === page })}\n              key={page}\n              value={page}\n            >\n              <a\n                data-cy=\"pageLink\"\n                className=\"page-link\"\n                href={`#${page}`}\n                onClick={() => changePage(page)}\n              >\n                {page}\n              </a>\n            </li>\n          ))\n        }\n        <li\n          className={classNames('page-item',\n            { disabled: currentPage + 1 > pagesLength })}\n        >\n          <a\n            data-cy=\"nextLink\"\n            className=\"page-link\"\n            href=\"#next\"\n            aria-disabled={currentPage + 1 > pagesLength}\n            onClick={() => (\n              currentPage + 1 <= pagesLength && onPageChange(currentPage + 1)\n            )}\n          >\n            »\n          </a>\n        </li>\n      </ul>\n\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport './App.css';\nimport { getNumbers } from './utils';\nimport { Pagination } from './components/Pagination';\n\nconst items = getNumbers(1, 42)\n  .map(n => `Item ${n}`);\nconst itemsLength = items.length;\nconst selectOptionsValues = [3, 5, 10, 20];\n\nexport const App: React.FC = () => {\n  const params = { page: '1', perPage: '5' };\n  const [searchParams, setSearchParams] = useSearchParams(params);\n  const pageQuery = Number(searchParams.get('page'));\n  const perPageQuery = Number(searchParams.get('perPage'));\n  const lastNumber = Math.min(perPageQuery * pageQuery, itemsLength);\n  const sliceItems = (countPerPage: number, page: number) => {\n    const end = page * countPerPage;\n    const start = end - countPerPage;\n\n    return [...items].slice(start, end);\n  };\n\n  const [visibleItems, setVisibleItems]\n    = useState(sliceItems(perPageQuery, pageQuery));\n  const firstNumber = lastNumber - visibleItems.length + 1;\n  const handleItems = (count: number, page: number) => {\n    params.page = page.toString();\n    params.perPage = count.toString();\n    setSearchParams(params);\n    setVisibleItems(sliceItems(count, page));\n  };\n\n  const onPageChange = (page: number) => {\n    params.page = page.toString();\n    setSearchParams(params);\n    handleItems(perPageQuery, page);\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>Items with Pagination</h1>\n\n      <p className=\"lead\" data-cy=\"info\">\n        {`Page ${pageQuery} (items ${firstNumber} - ${lastNumber} of ${itemsLength})`}\n      </p>\n\n      <div className=\"form-group row\">\n        <div className=\"col-3 col-sm-2 col-xl-1\">\n          <select\n            data-cy=\"perPageSelector\"\n            id=\"perPageSelector\"\n            className=\"form-control\"\n            value={perPageQuery}\n            onChange={(event) => {\n              const newCountPerPage = Number(event.target.value);\n\n              params.perPage = newCountPerPage.toString();\n              params.page = '1';\n              setSearchParams(params);\n              handleItems(newCountPerPage, 1);\n            }}\n          >\n            {\n              selectOptionsValues.map(value => (\n                <option value={value} key={value}>{value}</option>\n              ))\n            }\n          </select>\n        </div>\n\n        <label htmlFor=\"perPageSelector\" className=\"col-form-label col\">\n          items per page\n        </label>\n      </div>\n      <Pagination\n        total={itemsLength}\n        perPage={perPageQuery}\n        currentPage={pageQuery}\n        onPageChange={onPageChange}\n      />\n\n      <ul>\n        {\n          visibleItems.map((item) => (\n            <li key={item} data-cy=\"item\">\n              {item}\n            </li>\n          ))\n        }\n      </ul>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <Router>\n    <App />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}